# =============================================
# springboot 2 configurations
# ---------------------------------------------
spring:
  application:
    name: ${OPENSHIFT_APP_NAME:camel-policy}
  datasource:
    initialization-mode: never

api:
  title: ${OPENSHIFT_APP_NAME:camel-policy}
  description: Sample API
  version: 1
  hostname: ${OPENSHIFT_HOST_NAME:camel-policy.apps.openshift.com}

logging:
  config: classpath:logback.xml
  level:
    root: DEBUG

# options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
camel:
  springboot:
    name: ${OPENSHIFT_APP_NAME:camel-policy}
    main-run-controller: true
  component:
    servlet:
      mapping:
        contextPath: /api/v${api.version}/*
    jmxEnabled: true
    netty4-http:
      configuration:
        protocol: https

server:
  address: 0.0.0.0
  port: 8090

# lets use a different management port in case you need to listen to HTTP requests on 8080
management:
  server:
    # default health-check probe port: 8081
    port: 8081
    address: 0.0.0.0
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - metrics
          - jvm
          - prometheus
  metrics:
    export:
      prometheus:
        enabled: true

# =============================================
# opentracing configurations
# see: https://github.com/opentracing-contrib/java-spring-jaeger/blob/master/README.md
# ---------------------------------------------
opentracing:
  jaeger:
    enabled: true
    service-name: ${OPENSHIFT_APP_NAME:camel-policy}
    enable-b3-propagation: true
    log-spans: true
    const-sampler:
      decision: true
    udp-sender:
      host: ${OPENSHIFT_JAEGER_HOST:localhost}
      port: 6831
    http-sender:
      #url: http://jaeger-collector:14268/api/traces
      url: ${OPENSHIFT_JAEGER_TRACE_API_URL:http://localhost:14268/api/traces}
      # password:
      # username:
    expand-exception-logs: true
    remote-reporter:
      max-queue-size: 10000
      flush-interval: 1000
    tags:
      - sample

# =============================================
# prometheus api parameters
# ---------------------------------------------
prometheus:
  host: ${OPENSHIFT_PROMETHEUS_API_URL:"prometheus.microservices.svc.cluster.local"}
  port: 8080
  status-path: ${OPENSHIFT_PROMETHEUS_STATUS_URL:prometheus.microservices.svc.cluster.local:8080/health}

# =============================================
# SSL configuration
# ---------------------------------------------
proxy:
  consumer: ${OPENSHIFT_PROXY_SCHEMA:netty4-http}
  producer: ${OPENSHIFT_PROXY_DESTINATION_COMPONENT_SCHEMA:netty4-http}
  port: ${OPENSHIFT_PROXY_PORT:8443}
  keystore:
    #dest: ${OPENSHIFT_PROXY_KEYSTORE_DESTINATION:/deployments/data/keystore.jks}
    #pass: ${OPENSHIFT_PROXY_KEYSTORE_PASSWORD:changeme}
    dest: ${OPENSHIFT_JETTY_KEYSTORE_DESTINATION:/deployments/data/keystore.jks}
    pass: ${OPENSHIFT_JETTY_KEYSTORE_PASSWORD:77z9SYEGhSovlsBkALpko0BUb}

